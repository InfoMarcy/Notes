#Create a serverless project
1. sls create -t aws-nodejs
#execute the serverless project
2. sls invoke local -f app

#Event
sls invoke local -f app -d '{"first": 3, "second" : 8}'

module.exports.app = async (event, context) => {
//object destructuring
  const {first, second} = event;
  const added = first + second;
  
  return {
    statusCode: 200,
    body: JSON.stringify({
      message: 'yeah',
      event: added,
    }),
  };
};

#Simple Rest Endpoint
#Serverless online
1. npm init -y

#Serverless nodejs package for runtime
2.npm i --save-dev serverless-offline

#serverless.yaml
3. service: aws-nodejs # NOTE: update this with your service name

npm i serverless-offline

plugins: 
 -serverlesss-offline
 
 # Run our nodejs with serverless
 4. sls offline start

#Deploy to AWS #function name => app
1. sls deploy
2. sls deploy -s production -f app
3. sls logs -f app -s dev --startTime 10m

#Remove a function
1. sls remove -s dev


#################################REST API with pre-written Serverless Components#######################################
https://serverless.com/blog/how-create-rest-api-serverless-components/
1. npm install --global serverless-components
2. components deploy
3. components remove


##############################Create a Serverless Project#################################
1. sls create -t aws-nodejs --name serverless-rest-api-app
2. npm init -y
3. sls logs -f <name of the function>


######################Library to generate an unique id ####################################
1. npm i  uuid --save

const uuidv1 = require(uuid/v1);
