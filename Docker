Docker
1. List all docker Images => docker images -a

2. List all running Docker Containers => docker ps

3. Start a docker container => docker start <container name>

4. Remove a docker image => docker rmi <image name>

5. Remove all docker images => docker rmi $(docker images -q)

6. Stop a docker container => docker stop <container name>

7. Stop All running containers => docker kill $(docker ps -q)

8. Delete all stop docker containers => docker rm $(docker ps -a -q)

9. View the logs of a running container => docker logs -f  <container name>

10. List all docker containers => docker ps -a

11. Run mongo on docker =>  docker  run  -p 27017:27017 -d mongo

12. See the container => docker ps



How to Persist Database Data on inside a Docker Container
1. Get docker history =>  history | grep mongo

2. Make a directory in your local machine to persist the data on the and avoid it to be lost when the container is restarted  => mkdir dockerdata/mongo

3. Stop the docker container => docker stop <container name>

4. Run Docker specifying the local directory where i want to save my data =>  docker  run  -p 27017:27017  -v /Users/desarrolladorios1/dockerdata/mongo:/data/db -d mongo

5. Get docker history =>  history | grep mongo
6. Run mongo again  using the thread number from history=> !587
_____________________________________________________________
Run RabbitMQ in a Docker Container

7. Run RabbitMQ n docker => 
docker run -d --hostname luxmart-rabbit --name some-rabbit -p 8080:15672 -p 5671:5671 -p 5672:5672 rabbitmq:3-management

_____________________________________________________________
How to Persist Database Data on inside a Docker Container
1. Run MySql in a Docker Container and persist the data in a local directory => docker run --name luxmart-mysql -v /Users/desarrolladorios1/dockerdata/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root  -p 3306:3306 -d mysql

2. MYSQL with no pass => docker run --name docker-mysql -v /Users/desarrolladorios1/dockerdata/mysql:/var/lib/mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes  -p 3306:3306 -d mysql

HouseKeeping on Docker 
1. Kill All running containers => docker kill $(docker ps -q)
2. Delete all stop docker containers => docker rm $(docker ps -a -q)
3. Delete  all  untagged docker images => docker rmi $(docker images -q -f dangling=true)
4. Delete  all docker images => docker rmi $(docker images -q)
5. Remove all Dangling volumes => docker volume rm $(docker volume ls -f dangling=true -q)

Run Centos Image
1. docker run -d centos


_____________________________________________________________


Run Centos Image
1. Install centos in docker =>  docker run -d centos
2. Next step after installing centos to run it =>  docker run -d centos tail -f /dev/null
3. Shell into centos =>  docker exec -it 9e0f472230f6 bash
4. check if java is install => java -version
5. install java => yum install java

4. Get to the user of the system you are using  => whoami
5. kill a process => kill -9 <process id>

Dockerfile => 
FROM centos

RUN yum install -y java

VOLUME /tpm

ADD /spring-boot-mongodb-0.0.1-SNAPSHOT.jar myapp.jar
RUN sh -c 'touch /myapp.jar
ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom"."-jar", "/myapp.jar"]

See the Dockerfile in the console => vi Dockerfile

To Initialize  java in docker => docker build -t spring-boot-docker .
To run java in docker => docker run -d -p 8080:8080 spring-boot-docker

_____________________________________________________________
Run Zipking in docker => docker run -d -p 9411:9411 openzipkin/zipkin

----------------------------------------------------------------
Run MySQL in a docker container
docker run -d \
    --name demo-mysql \
    -e MYSQL_ROOT_PASSWORD=p4SSW0rd \
    -e MYSQL_DATABASE=demo \
    -e MYSQL_USER=dbuser \
    -e MYSQL_PASSWORD=dbp4ss \
    mysql:latest
