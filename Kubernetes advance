#get the cluster info
1. kubectl cluster-info

# see the master node
2. kubectl get nodes

#We create a Deployment configuration with the following command:
3. kubectl run employee-service-microservicio --image=infomarcy/employee-service-microservicio --port=8080

#see the deployment that was generated
4. kubectl get deployments

#see the pod that was generated
5. kubectl get pods

#Retrieve information about our Pod 
6. kubectl describe pods <POD NAME>

 #To look at the standard output of your application:
 7. kubectl logs <POD NAME>
 
 #To execute commands on the Pod
 8. kubectl exec <POD NAME> env
 9. kubectl exec -ti <POD NAME> bash
 
 #Expose application publicly
 #At this moment, our application is running in the Kubernetes cluster, 
 #but is still not accessible from outside the cluster. And that is eventually what we want. 
 #In order to accomplish this, we need to create a Service.
 10. kubectl get services
 
 11.  kubectl get deployments
 
 #let’s expose our application to the outside world:
 12. kubectl expose deployment/employee-service-microservicio --type="NodePort" --port 8080

#The application is exposed on a certain port, and in order to know this port
13. kubectl describe services/employee-service-microservicio

#The port number at property NodePort is the port which is exposed for our application
14. curl http://${LoadBalancer Ingress}:${NodePort}
curl http://localhost:30579/

#Now, let’s check which labels are present. First, we check the label of our deployment:
15. kubectl describe deployment

#Kubernetes has automatically added this label to our Deployment => Labels:  run=employee-service-microservicio

#Now we can check which Pods and Services also have the same label;
15. kubectl get pods -l run=employee-service-microservicio
16. kubectl get services -l run=employee-service-microservicio

#deployment.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: employee
  labels:
    app: employee
spec:
  replicas: 1
  selector:
    matchLabels:
      app: employee
  template:
    metadata:
      labels:
        app: employee
    spec:
      containers:
      - name: employee
        image: infomarcy/employee-service-microservicio
        imagePullPolicy: Always #force the pod to update the image from the repositorio
        ports:
        - containerPort: 8080


#Upload docker images to docker hub
1. docker build -t employee-service-microservicio .
2. docker run -d -p 8080:8080 employee-service-microservicio

#upload a java image on docker to docker hub => first tag the image with the name of the repo
3. docker tag employee-service-microservicio infomarcy/employee-service-microservicio
4. docker push infomarcy/employee-service-microservicio
