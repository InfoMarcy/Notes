Execute the following command to determine if your Kubernetes cluster is running in an environment that supports external load balancers:
1. kubectl get svc istio-ingressgateway -n istio-system
2. kubectl describe  gateway java-app-gateway
3. kubectl get svc -n istio-system | grep istio-ingress

4. export GATEWAY_URL=$(kubectl get po   -n istio-system -o 'jsonpath={.items[0].status.hostIP}'):$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath={.spec.ports[0].nodePort})
5. echo $GATEWAY_URL 

# Find the istio-ingresgateway pods that are tagged with the label “istio=ingressgateway”. 
6. kubectl get pod -n istio-system -l istio=ingressgateway -o name

#If your cluster is running in an environment that supports external load balancers, use the ingress’ external address:
7. kubectl get ingress java-app-ingress -o wide
8. export INGRESS_URL=192.168.65.3


#The VirtualService looks correct. Make sure that you have only one VirtualService for the host 
9. istioctl get all --all-namespaces

#Istio configures Envoy to listen for the admin portion on port 15000
kubectl -n istio-system port-forward istio-ingressgateway-7f4dd7d699-dfdq8 15000

To access your application, you need to create an Istio Gateway to connect all the microservices and access it. Thus, do:
1. ---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: java-app-gateway
spec:
  selector:
    istio: ingressgateway  # use istio default controller
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: microservice-main-routes
spec:
  hosts:
    - "*"
  gateways:
    - java-app-gateway
  http:
    - match:
        - uri:
            exact: /
      route:
        - destination:
            host: hr-core-service
            port:
              number: 8080
    - match:
        - uri:
            prefix: /verify/.*
      route:
        - destination:
            host: hr-core-service
            port:
              number: 8080
    - match:
        - uri:
            prefix: /create-accounts/.*
      route:
        - destination:
            host: hr-account-service
            port:
              number: 9090
