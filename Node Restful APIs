#Express Framework => http://expressjs.com/en/4x/api.html#req
1. npm init --yes
2. npm i express

// Environment variable
const port = process.env.PORT || 3000;


//listen on a given port
app.listen(port, () => console.log(`Listening on port ${port}...`));

# Install a node package  called nodemon which is short for node monitor (In this case we dont have to stop the server manually every time)
3. npm i -g nodemon
#Now we run our application using nodemon
4. nodemon index.js

# To export a port on mac cm
5. export PORT=5000

# Install a node package  called joi which validate inputs
7. npm i -g joi

# Install a node package  called helmet => https://github.com/helmetjs/helmet
8. npm install helmet --save

# Install a node package  called morgan which log every http request you make to the server
8. npm install helmet --save


# Install a node package  called config  which lets you save the configuration for your project
9. npm i config


# Install a node package  called config  which lets you debug your application
10. npm i debug


# Install a node package  called pug  which lets render html markup
11. npm i pug

//set environment variable on cm
export NODE_ENV=production

#Database integration with NodeJS => https://expressjs.com/en/guide/database-integration.html

#====================================== index.js FILE =============================================================

//configuration for the enviroments using npm config files are alocated on config folder
const config = require('config');

//debug nodejs module
const startupDebugger = require('debug')('app:startup');
const dbDebugger = require('debug')('app:db');
// to set the debug type we use 
// export DEBUG=app:startup
// export DEBUG=app:startup,app:db
// export DEBUG=app:*
// DEBUG=app:db nodemon index.js

// third party middleware
const helmet = require('helmet');
var morgan = require('morgan');
// input validation module class
const Joi = require('joi');
// load the express framework module
const express = require('express');
// call the express function which return an object
const app = express();
app.use(express.json()); // enable json req.body
app.use(express.urlencoded({extended: true})); //key=value&key=value

// use to access and share static files
app.use(express.static('public'));
app.use(helmet());


// use morgan just when you are working on development
if(app.get('env') === 'development'){
    app.use(morgan('tiny'));
    startupDebugger('Morgan enabled ......')
}

// Db Work for database
dbDebugger('Connected to the database....');

//local
const logger = require('./logger');


// build custom middleware
app.use(logger);


app.use(function(req, res, next){
    console.log('Authenticating.....');
    next();
});

// array of courses
const courses = [
{id: 1, name: 'course 1'},
{id: 2, name: 'course 2'},
{id: 3, name: 'course 3'},
{id: 4, name: 'course 4'},
]
//================================  CONFIGURATION ================================
//export NODE_ENV=development
console.log(`Application Name: ${config.get('name')}`);
console.log(`Mail server: ${config.get('mail.host')}`);
// export app_password=1234
console.log(`Mail password from environment varibales: ${config.get('mail.password')}`);
//================================  http GET request ================================
app.get('/', (req, res) => {
//res.send('Hello World!');
//using pug html  markup 
res.render("index", {title: 'My express app', message: 'hello from pug template'});
});

// http get without parameters
app.get('/api/courses', (req, res) => {
res.send(courses);
});

// http get with parameters
app.get('/api/courses/:id', (req, res) => {
   let course = courses.find(c => c.id === parseInt(req.params.id));

   if(!course){ // 404 not found
     return  res.status(404).send('The course with the given id was not found');
   }

    // if course exist return it
    res.send(course);
    });

    // http get with  multiples parameters => http://localhost:5000/api/post/2018/1
app.get('/api/post/:year/:month', (req, res) => {
   return res.send(req.params);
  });


        // http get with  multiples parameters => http://localhost:5000/api/post/2018/1?sortBy=name
//app.get('/api/post/:year/:month', (req, res) => {
//   res.send(req.query);
//   });


//================================ http POST request ================================

app.post('/api/courses', (req, res)=> {

//validate
const { error } = validateCourse(req.body); // result.error

   if(error){ // 400 Bad Request
    res.status(400).send(error.details[0].message);
    return;
  };

    const course = {
        id: courses.length +1,
        name: req.body.name
};

//save the course
courses.push(course);
// return the course
res.send(course);
});


//================================ http PUT request ================================
app.put('/api/courses/:id', (req, res)=> {
// Look for the course  and  if not existing, return 404
const course = courses.find(c => c.id === parseInt(req.params.id));
   if(!course){ // 404 not found
     return  res.status(404).send('The course with the given id was not found');
   }

//validate
const { error } = validateCourse(req.body); // result.error

   if(error){ // 400 Bad Request
    res.status(400).send(error.details[0].message);
    return;
  };

// update the course
course.name = req.body.name;
// Return the updated course
res.send(course);

});

//================================ http DELETE request ================================
app.delete('/api/courses/:id', (req, res)=> {
// Look for the course  and  if not existing, return 404
const course = courses.find(c => c.id === parseInt(req.params.id));
   if(!course){ // 404 not found
      return res.status(404).send('The course with the given id was not found');
   }

// delete
const index = courses.indexOf(course);
courses.splice(index, 1);

// return the same course
res.send(course);

});






//================================ joi input validation fucntion  ================================
// validate course
function validateCourse(course){
    // if invalid 400  - Bad Request // joi input validation
        const schema = {
            name: Joi.string().min(3).required()
        };
        
       return Joi.validate(course, schema);
}


// Environment variable
const port = process.env.PORT || 3000;

//listen on a given port
app.listen(port, () => console.log(`Listening on port ${port}...`));

=========================== .  Nodejs Environment Variables =================================
${process.env.MONGO_USER}
${process.env.PORT}


On package.json => 
{
  "name": "banca-digital-login-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon"

  },



npm install compression
