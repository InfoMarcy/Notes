
var url = 'http://apideusuario-microprofile.a3c1.starter-us-west-1.openshiftapps.com/employees/username/usuario_strong';

function getCliente(message){
    console.log(message);
}
#exports a funtion
1. module.exports = getCliente;


#Load a module
2. require('./<name of module>')

const log = require('./logger');
const path = require('path');
const os = require('os');
log('message');

console.log(`Total Memory: " ${memory}`);


#Call event from another module
1.app.js
const EventEmitter = require('events');
const Logger = require('./logger');
const logger = new Logger();


// Register  a listener
logger.on('MessageLog', (arg) => {
    console.log('Listener called', arg);
});


logger.log('message');

2.logger.js
const EventEmitter = require('events');

class Logger extends EventEmitter {
     log(message){
        console.log(message);

    // Raise an event
    this.emit('MessageLog', {id: 1 , url: 'http://apideusuario-microprofile.a3c1.starter-us-west-1.openshiftapps.com/employees/username/usuario_strong'});
    }
}

module.exports = Logger;



#Create a package.json using npm
1. npm init --yes
2. npm i underscore
# To find the functionalities of undercore visit => https://underscorejs.org/

#Install mongoose which is used to store our data on mongodb
3. npm i mongoose

#When transfering and storing the node project donÂ´t include the node_modules folder
#to restore the dependencies of a node project run on terminal
3. npm i

# To ignore a folder from git create a file in the root of the project called => .gitignore
# and put the name of the folder which you dont want to include in your repository, example => node_modules/

# See the list of all the versions of the dependencies of your application
4. npm list --depth=0
5. npm view mongoose dependencies

#Install a specific version of node dependecy package
6. npm i mongoose@2.4.2

#Check with dependencies are outdated
7. npm outdated
# To update it to the latest version
8. npm i -g npm-ckeck-updates
9. npm-check-updates
// to update the dependencies run
10. npm i 


#Dependencies to anylise our javascript code and look for potencials errors
11. npm i jshint --save-dev

# To unistall a package using npm
12. npm un <package name>

# Install a package globally
13. npm i -g npm
#Check all the install global package outdated
14. npm  -g outdated
# unistall a global package
15. npm  un -g <package name>



