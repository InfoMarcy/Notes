Redis (Cache Server) is an inmemory data store. Which is a tiny database that runs in the memory of your machine 
and allows you to read and write data very quickly. its a data store that operates only in memory 
so that means once it gets turn off or restarted all the data that sits inside of it is instanly delete and wipe.
You can only read data from Redis Cache Server.

Library => npm i redis


Redis
Key | Value
'id'  'hola'


#Install redis
1. which brew
2. brew install redis
3. brew services start redis
4. redis-cli ping


// Connect to redis
const redis = require('redis');
const redisUrl = 'redis://127.0.0.1:6379';
const client = redis.createClient(redisUrl);


// Set a value on redis
1. client.set('hi', 'there'); //should return true

// Get a value from redis
2. client.get('hi', (err, value)=> {
     console.log(value);
   });

Redish hashes
1. client.hset('spanish', 'red', 'rojo');
2. client.hget ('spanish', 'red', (err, value)=> {
             console.log(value);
    });

const redisValues = {
  spanish: {
    red: "rojo",
    orange: "naranja",
    blue: "azul"
  },
  german: {
    red: "rot",
    orange: "orange",
    blue: "blau"
  }
};

//To save object into redis first we have to turn it into json
1. client.set('colors', JSON.stringify( {red: 'rojo'} ));
2. client.get('colors', console.log);
3. client.get('colors', (err, value)=> {
             console.log(JSON.parse(value));
    });

Redis => Key | Value => We want query keys that are consistent but unique between query executions

#DELETE ALL THE DATA FROM REDIS CACHE
client.flushall();


#EXPIRE THE REDIS CACHE VALUES ' EX', (NUMBER OF SECONDS)
1. client.set('colors', JSON.stringify( {red: 'rojo'}, 'EX', 5));
2. client.set('color', 'red', 'EX', 5);
3. client.get('color', console.log)













//===================================NodeJS Code Example======================================//
const express = require("express");
const router = express.Router();
const { Genre, validate } = require("../models/genre");
const validateObjectId = require("../middleware/validateObjectId");

// Connect to redis
const redis = require('redis');
const redisUrl = 'redis://127.0.0.1:6379';
const client = redis.createClient(redisUrl);
const util = require('util');
 // Remove call back and return a promise using util promisify
client.get = util.promisify(client.get);


// Get an item By ID from the database
router.get("/:id", validateObjectId, async (req, res) => {

  // Do we have any catched data in redis related to this query
  const cachedGenre = await client.get(req.params.id);
  console.log("cachedGenre => ", cachedGenre);

  //if Yes, then respond to the request right away and return
  if(cachedGenre){
    console.log('SERVING FROM CACHE');
  return res.status(202).send(JSON.parse(cachedGenre));
  }

  // if no, we need to respond to request and update our cache to store the data
  const genre = await Genre.findById(req.params.id);
  // if there is no record return 404 error
  if (!genre)
    return res.status(404).send("The Genre with the given ID was not found");

   // Set the query and its data to redis
   client.set(req.params.id, JSON.stringify(genre));


  // return the response
  console.log('SERVING FROM MONGODB');
   res.status(200).send(genre);
});
//=================================== END NodeJS Code Example======================================//
