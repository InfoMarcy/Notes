#Set default namespace with stio-injection=enabled labeled
1. kubectl label namespace default istio-injection=enabled
2. kubectl get namespace -L istio-injection


#Check the status and make sure all the components are in running state before continuing:
2. kubectl get pods -n istio-system

#Istio Manual Injection
Inject the Istio Envoy sidecar into the guestbook pods, and deploy the Guestbook app on to the Kubernetes cluster.
1. kubectl apply -f <(istioctl kube-inject -f ../v1/guestbook-deployment.yaml)
2. kubectl apply -f <(istioctl kube-inject -f guestbook-deployment.yaml)



=======================#Format deployment file with istio configuration=====================================
#Generate Istio configuration file for our deployment
1. istioctl kube-inject -f deployment.yaml

# create a new file with the configuration given by the previos command
2. kubectl apply -f deployment-with-istio.yaml


#Create the Istio Pilot Service Account and Cluster Role
1. kubectl apply -f istio-pilot.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-pilot
  

#Create the istio-pilot cluster role:
2. kubectl apply -f clusterroles/istio-pilot.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-pilot
rules:
  - apiGroups: [""]
    resources: ["configmaps", "endpoints", "pods", "services"]
    verbs: ["*"]
  - apiGroups: ["extensions"]
    resources: ["thirdpartyresources", "thirdpartyresources.extensions", "ingresses"]
    verbs: ["*"]
  - apiGroups: ["istio.io"]
    resources: ["istioconfigs", "istioconfigs.istio.io"]
    verbs: ["*"]
    
    
 #Create the istio-pilot role binding:
3. kubectl apply -f rolebindings/istio-pilot.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-pilot
subjects:
  - kind: ServiceAccount
    name: istio-pilot
roleRef:
  kind: ClusterRole
  name: istio-pilot
  apiGroup: rbac.authorization.k8s.io
  
Create the Istio ConfigMap
Create the istio ConfigMap which holds the Istio configuration:
4. kubectl apply -f configmaps/istio.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio
data:
  mesh: |-
    discoveryAddress: istio-pilot:8080
    ingressService: istio-ingress

Create the Istio Pilot Deployment
Create the istio-pilot deployment:
5. kubectl apply -f deployments/istio-pilot.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-pilot
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        alpha.istio.io/sidecar: ignore
      labels:
        istio: pilot
    spec:
      serviceAccountName: istio-pilot
      containers:
        - name: discovery
          image: docker.io/istio/pilot:0.1.6
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          args:
            - "discovery"
            - "-v=2"
          ports:
            - name: http-discovery
              containerPort: 8080
        - name: apiserver
          image: docker.io/istio/pilot:0.1.6
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          args:
            - "apiserver"
            - "-v=2"
          ports:
            - name: http-apiserver
              containerPort: 8081
Expose the Istio Pilot Deployment
Create the istio-pilot service:              
6. kubectl apply -f services/istio-pilot.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    istio: pilot
  name: istio-pilot
spec:
  ports:
    - name: http-apiserver
      port: 8081
    - name: http-discovery
      port: 8080
  selector:
    istio: pilot
    
At this point the Istio Pilot service is ready for use:

7. kubectl get pods -l istio=pilot
