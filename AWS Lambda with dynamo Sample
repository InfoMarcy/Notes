################################## SAVE DATA TO MONGO DB USING LAMBDA   #####################################################
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async (event) => {
    console.log(event.age);
     console.log(event.height);
      console.log(event.income);
    
    var params = {
    Item: {
      userId: "user_" +Math.random(),
      age: event.age,
      height: event.height,
      income: event.income
    },
    TableName: "compare-yourself"
  };
  

    
    
    return docClient
    .put(params)
    .promise()
    .then(() => {
      return createResponse(201, params.Item);
    })
    .catch(ex => {
      return createResponse(500, ex);
    });
    
    
function createResponse(statusCode, message) {
  return {
    statusCode: statusCode,
    body: message
  };
}
};
################################## GET DATA FROM MONGO DB USING LAMBDA   #####################################################
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async (event) => {
    
 var userId = "user_0.5423538301732376";
 var age = 28
 const params = {
    Key: {
      userId: userId,
      age: age
    },
    TableName: "compare-yourself"
  };
    
return docClient
    .get(params)
    .promise()
    .then(res => {
      return createResponse(200, res.Item);
    })
    .catch(ex => {
      return createResponse(500, ex);
    });
    
    
function createResponse(statusCode, message) {
  return {
    statusCode: statusCode,
    body: message
  };
}
};
